generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  id        Int    @id @default(autoincrement())
  studentId Int
  gownId    Int
  status    String
  type      OrderType
  Gown      Gown   @relation(fields: [gownId], references: [id])
}

model Gown {
  id            Int         @id @default(autoincrement())
  name          String
  size          String
  price         Float
  category      GownCategory
  customSize    Json?
  inStock       Boolean     @default(true)
  images        Image[]
  type          GownType
  InstitutionId Int
  Institution   Institution @relation(fields: [InstitutionId], references: [id])
  orders        Order[]
  availableSizes Json?      
}


model Image {
  id      Int    @id @default(autoincrement())
  url     String
  gownId  Int
  Gown    Gown   @relation(fields: [gownId], references: [id])
}

model Institution {
  id             Int           @id @default(autoincrement())
  name           String
  description    String
  email          String        @unique
  phone          String?
  type           String
  category       String
  establishedAt  DateTime
  isActive       Boolean       @default(true)
  students       Student[]
  gowns          Gown[]
  photos         Photography[]
  users          User[]        @relation("InstitutionToUsers")
}

model Photography {
  id            Int         @id @default(autoincrement())
  name          String
  description   String
  price         Float
  category      String
  frames        Frame[]
  InstitutionId Int
  Institution   Institution @relation(fields: [InstitutionId], references: [id])
}

model Frame {
  id            Int         @id @default(autoincrement())
  name          String
  price         Float
  photographyId Int
  Photography   Photography @relation(fields: [photographyId], references: [id])
}

model User {
  id            Int          @id @default(autoincrement())
  name          String
  email         String       @unique
  password      String?
  role          UserRole
  createdAt     DateTime     @default(now())
  student       Student?
  institutionId Int?
  institution   Institution? @relation("InstitutionToUsers", fields: [institutionId], references: [id], onDelete: Cascade)
  sessions      Session[]
  accounts      Account[]
}

model Student {
  id            Int         @id @default(autoincrement())
  studentId     String      @unique
  name          String
  email         String      @unique
  phone         String?
  InstitutionId Int
  Institution   Institution @relation(fields: [InstitutionId], references: [id])
  user          User?       @relation(fields: [userId], references: [id])
  userId        Int?        @unique
  sessions      Session[]
  accounts      Account[]
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  expires      DateTime
  userId       Int?
  studentId    Int?
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  student      Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Account {
  id                String   @id @default(uuid())
  userId            Int?
  studentId         Int?
  type              String
  provider          String
  providerAccountId String   @unique
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  user              User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  student           Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

enum UserRole {
  STUDENT
  ADMIN
  INSTITUTION_ADMIN
}

enum GownCategory {
  UNDERGRADUATE
  POSTGRADUATE
  DOCTORAL
  CUSTOM
}

enum GownType {
  PHD
  MASTERS
  BACHELORS
  DIPLOMA
}

enum OrderType {
  BUY
  HIRE
}
