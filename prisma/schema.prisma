generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  id                 Int       @id @default(autoincrement())
  studentId          Int
  gownId             Int?
  status             String
  type               OrderType
  customMeasurements Json?
  Gown               Gown?     @relation(fields: [gownId], references: [id])
  Student            Student   @relation(fields: [studentId], references: [id])
}

model Gown {
  id             Int          @id @default(autoincrement())
  name           String
  size           String
  price          Float
  InstitutionId  Int
  inStock        Boolean      @default(true)
  category       GownCategory
  customSize     Json?
  type           GownType
  availableSizes Json?
  department     String
  Institution    Institution  @relation(fields: [InstitutionId], references: [id])
  images         Image[]
  orders         Order[]
}

model Image {
  id     Int    @id @default(autoincrement())
  url    String
  gownId Int
  Gown   Gown   @relation(fields: [gownId], references: [id])
}

model Institution {
  id            Int           @id @default(autoincrement())
  name          String
  description   String
  email         String        @unique
  phone         String?
  type          String
  category      String
  establishedAt DateTime
  isActive      Boolean       @default(true)
  gowns         Gown[]
  photos        Photography[]
  students      Student[]
  users         User[]        @relation("InstitutionToUsers")
}

model Photography {
  id            Int                @id @default(autoincrement())
  name          String
  description   String
  price         Float
  category      String
  InstitutionId Int
  frames        Frame[]
  photoOrders   PhotoOrder[]
  Institution   Institution        @relation(fields: [InstitutionId], references: [id])
  images        PhotographyImage[]
}

model PhotographyImage {
  id            Int         @id @default(autoincrement())
  url           String
  photographyId Int
  photography   Photography @relation(fields: [photographyId], references: [id])
}

model PhotoOrder {
  id              Int            @id @default(autoincrement())
  studentId       Int
  photographyId   Int
  orderType       PhotoOrderType
  deliveryContact String?
  photoSize       String?
  frameId         Int?
  createdAt       DateTime       @default(now())
  Frame           Frame?         @relation(fields: [frameId], references: [id])
  Photography     Photography    @relation(fields: [photographyId], references: [id])
  Student         Student        @relation(fields: [studentId], references: [id])
}

model Frame {
  id            Int          @id @default(autoincrement())
  name          String
  price         Float
  photographyId Int
  color         String?
  material      String?
  mountColor    String?
  thickness     String?
  Photography   Photography  @relation(fields: [photographyId], references: [id])
  images        FrameImage[]
  photoOrders   PhotoOrder[]
}

model FrameImage {
  id      Int    @id @default(autoincrement())
  url     String
  frameId Int
  Frame   Frame  @relation(fields: [frameId], references: [id])
}

model Student {
  id            Int          @id @default(autoincrement())
  studentId     String       @unique
  email         String       @unique
  InstitutionId Int
  name          String
  phone         String?
  userId        Int?         @unique
  accounts      Account[]
  orders        Order[]
  photoOrders   PhotoOrder[]
  sessions      Session[]
  Institution   Institution  @relation(fields: [InstitutionId], references: [id])
  user          User?        @relation(fields: [userId], references: [id])
}

model User {
  id            Int          @id @default(autoincrement())
  email         String       @unique
  password      String?
  createdAt     DateTime     @default(now())
  name          String
  institutionId Int?
  role          UserRole
  accounts      Account[]
  sessions      Session[]
  student       Student?
  institution   Institution? @relation("InstitutionToUsers", fields: [institutionId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  expires      DateTime
  userId       Int?
  studentId    Int?
  student      Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String   @id @default(uuid())
  userId            Int?
  studentId         Int?
  type              String
  provider          String
  providerAccountId String   @unique
  scope             String?
  accessToken       String?
  expiresAt         Int?
  idToken           String?
  refreshToken      String?
  sessionState      String?
  tokenType         String?
  student           Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  user              User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  STUDENT
  ADMIN
  INSTITUTION_ADMIN
}

enum GownCategory {
  UNDERGRADUATE
  POSTGRADUATE
  DOCTORAL
  CUSTOM
}

enum GownType {
  PHD
  MASTERS
  BACHELORS
  DIPLOMA
}

enum OrderType {
  BUY
  HIRE
}

enum PhotoOrderType {
  SOFT_COPY
  HARD_COPY
}
